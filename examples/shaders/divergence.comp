#version 460
layout(local_size_x=16, local_size_y=16, local_size_z=1) in;
// vel (RG32F) -> divergence (R32F)
layout(binding=0, rg32f) uniform image2D velField;
layout(binding=1, r32f) uniform image2D outDiv;

layout(push_constant) uniform PC { float pad0; float W; float H; float pad1; } pc;

vec2 vel(ivec2 p){ ivec2 q = clamp(p, ivec2(0), ivec2(int(pc.W)-1, int(pc.H)-1)); return imageLoad(velField, q).xy; }

void main(){ ivec2 gid = ivec2(gl_GlobalInvocationID.xy); if (gid.x>=int(pc.W) || gid.y>=int(pc.H)) return;
    // Central difference with clamped sampling
    float vl = vel(gid + ivec2(-1,0)).x;
    float vr = vel(gid + ivec2( 1,0)).x;
    float vb = vel(gid + ivec2(0,-1)).y;
    float vt = vel(gid + ivec2(0, 1)).y;
    float div = 0.5*(vr - vl) + 0.5*(vt - vb);
    imageStore(outDiv, gid, vec4(div,0,0,0));
}
