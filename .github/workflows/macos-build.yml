name: macos-build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: {}

concurrency:
  group: macos-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
    env:
      VULKAN_SDK_VERSION: 1.4.321.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          brew update
          brew install cmake ninja || true
          cmake --version
          ninja --version || true

      - name: Install Vulkan SDK (MoltenVK)
        uses: jakoch/install-vulkan-sdk-action@v1.0.3
        with:
          version: ${{ env.VULKAN_SDK_VERSION }}
          components: Vulkan-Headers,Vulkan-Loader,MoltenVK,Glslang,SPIRV-Tools,SPIRV-Headers
          cache: true
          quiet: true

      - name: Verify Vulkan / glslc
        run: |
          echo "VULKAN_SDK=$VULKAN_SDK"
          test -x "$VULKAN_SDK/bin/glslc" || (echo 'ERROR: glslc missing' && exit 1)
          "$VULKAN_SDK/bin/glslc" --version
          if command -v vulkaninfo >/dev/null 2>&1; then vulkaninfo | grep -m1 'Vulkan Instance Version' || true; fi

      - name: Cache third-party downloads
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt','cmake/*.cmake') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.build_type }}-
            deps-${{ runner.os }}-

      - name: Configure (${{ matrix.build_type }})
        run: |
          cmake -S . -B build -G Ninja -DVULKAN_VISUALIZER_BUILD_EXAMPLE=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build (${{ matrix.build_type }})
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Package artifacts (${{ matrix.build_type }})
        if: success()
        run: |
            mkdir -p artifacts
            EXE=build/examples/basic_window
            [ -f "$EXE" ] && cp "$EXE" artifacts/
            LIB=build/libvulkan_visualizer.a
            [ -f "$LIB" ] && cp "$LIB" artifacts/
            # 包含 glslc 以便后续可本地重新编译 shader
            [ -f "$VULKAN_SDK/bin/glslc" ] && cp "$VULKAN_SDK/bin/glslc" artifacts/
            # 可选复制 MoltenVK
            if [ -d "$VULKAN_SDK/Lib" ]; then ls "$VULKAN_SDK/Lib"/libMoltenVK.* 2>/dev/null | head -n1 | xargs -I{} cp {} artifacts/ || true; fi

      - name: Upload artifacts (${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.build_type }}
          path: artifacts
          if-no-files-found: error

      - name: Shader dir list (${{ matrix.build_type }})
        if: success()
        run: |
          ls -al build/examples/shaders || echo 'No shaders dir'
