name: windows-build

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch: {}

concurrency:
  group: windows-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
    env:
      VULKAN_SDK_VERSION: 1.4.321.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache third-party downloads (_deps archives)
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: deps-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', 'cmake/*.cmake') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.build_type }}-
            deps-${{ runner.os }}-

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: ${{ env.VULKAN_SDK_VERSION }}
          vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, shaderc, SPIRV-Tools, SPIRV-Headers, SPIRV-Cross, SPIRV-Reflect
          vulkan-use-cache: true

      - name: Verify Vulkan tools
        run: |
          echo "VULKAN_SDK=$env:VULKAN_SDK"
          if (-not (Test-Path "$env:VULKAN_SDK\Bin\glslc.exe")) { Write-Error 'glslc not found'; exit 1 }
          & "$env:VULKAN_SDK\Bin\glslc.exe" --version
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) {
            vulkaninfo | Select-String -Pattern 'Vulkan Instance Version'
          } else {
            Write-Warning 'vulkaninfo not in PATH';
          }
        shell: powershell

      - name: Configure (multi-config generator)
        run: |
          cmake -S . -B build -DVULKAN_VISUALIZER_BUILD_EXAMPLE=ON
        shell: powershell

      - name: Build (${{ matrix.build_type }})
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel
        shell: powershell

      - name: Package artifacts (${{ matrix.build_type }})
        if: success()
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $cfg='${{ matrix.build_type }}'
          $examplePath = "build/examples/$cfg/basic_window.exe"
          if (Test-Path $examplePath) { Copy-Item $examplePath artifacts/ -Force }
          $sdl = "build/examples/$cfg/SDL3.dll"
          if (Test-Path $sdl) { Copy-Item $sdl artifacts/ }
          $lib = "build/$cfg/vulkan_visualizer.lib"
          if (Test-Path $lib) { Copy-Item $lib artifacts/ }
          $pdb = "build/$cfg/vulkan_visualizer.pdb"
          if (Test-Path $pdb) { Copy-Item $pdb artifacts/ }
        shell: powershell

      - name: Upload artifacts (${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.build_type }}-output
          path: artifacts
          if-no-files-found: error

      - name: Shader directory list (${{ matrix.build_type }})
        if: success()
        run: |
          if (Test-Path build/examples/shaders) { Get-ChildItem build/examples/shaders } else { echo 'No shaders directory present.' }
        shell: powershell
