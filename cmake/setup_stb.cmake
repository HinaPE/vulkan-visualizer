# ============================================================================
# setup_stb.cmake (modern)
# Fetch nothings/stb via FetchContent and expose STB::stb interface target.
# Utilities:
#   - use_stb(<target>)
#   - stb_add_implementation(<target> COMPONENTS [image;image_write;image_resize;image_resize2])
#     Generates a per-target implementation TU that defines the selected
#     STB_xxx_IMPLEMENTATION macros exactly once and adds it to the target.
# ============================================================================

if(DEFINED _SETUP_STB_INCLUDED)
    return()
endif()
set(_SETUP_STB_INCLUDED TRUE)

include(FetchContent)

set(STB_GIT_TAG "master" CACHE STRING "stb git tag/commit")

FetchContent_Declare(
    stb
    GIT_REPOSITORY https://github.com/nothings/stb.git
    GIT_TAG        ${STB_GIT_TAG}
    GIT_SHALLOW    TRUE
)
FetchContent_MakeAvailable(stb)

# Interface target exposing headers
if(NOT TARGET STB::stb)
    add_library(STB::stb INTERFACE IMPORTED)
    set_target_properties(STB::stb PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${stb_SOURCE_DIR}"
    )
endif()

function(use_stb TARGET_NAME)
    if(NOT TARGET ${TARGET_NAME})
        message(FATAL_ERROR "use_stb called with unknown target `${TARGET_NAME}`")
    endif()
    if(NOT TARGET STB::stb)
        message(FATAL_ERROR "STB::stb target not available. Include setup_stb.cmake earlier.")
    endif()
    target_link_libraries(${TARGET_NAME} PUBLIC STB::stb)
endfunction()

# Generate an implementation TU for selected components and add to target
function(stb_add_implementation TARGET_NAME)
    if(NOT TARGET ${TARGET_NAME})
        message(FATAL_ERROR "stb_add_implementation called with unknown target `${TARGET_NAME}`")
    endif()
    set(options)
    set(oneValueArgs)
    set(multiValueArgs COMPONENTS)
    cmake_parse_arguments(_STB "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if(NOT _STB_COMPONENTS)
        # default to image + image_write
        set(_STB_COMPONENTS image image_write)
    endif()

    # Avoid adding multiple times
    get_property(_added TARGET ${TARGET_NAME} PROPERTY _STB_IMPL_ADDED SET)
    if(_added)
        message(STATUS "stb_add_implementation: implementation already added to ${TARGET_NAME}; skipping")
        return()
    endif()

    set(_impl "// Generated by stb_add_implementation for ${TARGET_NAME}\n")
    string(APPEND _impl "#ifdef _MSC_VER\n#pragma warning(push)\n#pragma warning(disable: 4100 4127 4189 4244 4365 4514 4820 4996)\n#endif\n")

    foreach(_c IN LISTS _STB_COMPONENTS)
        string(TOLOWER "${_c}" _lc)
        if(_lc STREQUAL "image")
            string(APPEND _impl "#define STB_IMAGE_IMPLEMENTATION\n#include <stb_image.h>\n")
        elseif(_lc STREQUAL "image_write")
            string(APPEND _impl "#define STB_IMAGE_WRITE_IMPLEMENTATION\n#include <stb_image_write.h>\n")
        elseif(_lc STREQUAL "image_resize2")
            string(APPEND _impl "#define STB_IMAGE_RESIZE2_IMPLEMENTATION\n#include <stb_image_resize2.h>\n")
        elseif(_lc STREQUAL "image_resize")
            string(APPEND _impl "#define STB_IMAGE_RESIZE_IMPLEMENTATION\n#include <stb_image_resize.h>\n")
        else()
            message(FATAL_ERROR "Unknown STB component: ${_c}")
        endif()
    endforeach()

    string(APPEND _impl "#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n")

    set(_impl_path "${CMAKE_CURRENT_BINARY_DIR}/stb_impl_${TARGET_NAME}.cpp")
    file(WRITE "${_impl_path}" "${_impl}")

    target_sources(${TARGET_NAME} PRIVATE "${_impl_path}")
    target_link_libraries(${TARGET_NAME} PRIVATE STB::stb)
    # Ensure headers are visible even if consumers include from source
    target_include_directories(${TARGET_NAME} PRIVATE "${stb_SOURCE_DIR}")

    set_property(TARGET ${TARGET_NAME} PROPERTY _STB_IMPL_ADDED TRUE)
endfunction()

